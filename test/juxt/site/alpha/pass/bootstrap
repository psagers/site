#_( ;; Allow this script to be executed directly
   "exec" "bb" "--classpath" "$(clojure -Spath -Sdeps '{:deps {io.aviso/pretty {:mvn/version "RELEASE"}}}')" "$0" "$@"
   )

;;"$(clojure -Spath -Sdeps '{:deps {io.aviso/pretty {:mvn/version "RELEASE"}}}')"

(ns bootstrap
  (:require
   [io.aviso.ansi :as ansi]
   [babashka.curl :as curl]
   [clojure.java.io :as io]
   [cheshire.core :as json]
   [clojure.pprint :refer [pprint]]
   [clojure.edn :as edn]))

(def CURL_DEBUG false)
(def HOST "localhost:8082")

(defn url [path]
  (format "%s%s" HOST path))

(defmacro with-status-message [msg & body]
  `(do
     (print (str ansi/yellow-font ~msg ansi/reset-font "..."))
     (let [result# ~@body]
       (println (str "[" ansi/bold-red-font "done" ansi/reset-font "]"))
       (println "Response was:")
       (pprint (select-keys result# [:status :headers]))
       result#)))

(def discover-openid-configuration-response
  (with-status-message
    (format "Get OpenID configuration")
    (curl/get
     (url "/.well-known/openid-configuration")
     {:headers {"accept" "application/json"}
      :throw true
      :debug CURL_DEBUG})))

(def openid-config (json/decode (:body discover-openid-configuration-response)))

(def token-endpoint (get openid-config "token_endpoint"))

(assert token-endpoint)

(assert (contains? (set (get openid-config "token_endpoint_auth_methods_supported")) "client_secret_basic"))

(def request-token-response
  (with-status-message
    (format "Get access token")
    (curl/post
     (url token-endpoint)
     {:headers {"content-type" "application/x-www-form-urlencoded"}
      :throw true
      :body "grant_type=client_credentials"
      :basic-auth ["webmaster" "FunkyForest"]
      :debug CURL_DEBUG})))

(def access-token-data (json/decode (:body request-token-response)))

(def access-token (get access-token-data "access_token"))

(prn access-token-data)

(def put-openapi-response
  (let [openapi (edn/read-string (slurp "openapi.edn"))
        openapi.json (json/generate-string openapi)]
    (with-status-message
      (format "PUT %s (%s)" (get-in openapi [:info :title]) (get-in openapi [:info :version]))
      (curl/put
       (url "/_site/apis/pass/openapi.json")
       {:headers {"content-type" "application/vnd.oai.openapi+json;version=3.0.2"
                  "authorization" (format "Bearer %s" access-token)}
        :body openapi.json
        :throw true
        :debug CURL_DEBUG}))))

(assert (= 201 (:status put-openapi-response)))

(def get-openapi-json-response
  (with-status-message
    "Checking OpenAPI using GET on /_site/apis/pass/openapi.json"
    (curl/get
     (url "/_site/apis/pass/openapi.json")
     {:headers {"authorization" (format "Bearer %s" access-token)}
      :throw true
      :debug CURL_DEBUG})))

(assert (= 200 (:status get-openapi-json-response)))
(:body get-openapi-json-response)

;; Now we are ready to PUT a role that will the owners of this Crux Site
;; instance will belong to.

(doseq [{:keys [id name]}
        [{:id "owner" :name "Owners"}
         {:id "superuser" :name "Superusers"}
         {:id "admin" :name "Administrators"}]]
  (let [response
        (with-status-message
          (format "PUT role '%s'" id)
          (curl/put
           (url (format "/_site/pass/roles/%s" id))
           {:headers {"content-type" "application/json"
                      "authorization" (format "Bearer %s" access-token)}
            :body (json/generate-string
                   {:type "Role"
                    :name name})
            :throw false
            :debug CURL_DEBUG}))]
    (assert (#{200 201} (:status response)))))

(def get-user-groups-response
  (with-status-message
    "GET roles"
    (curl/get
     (url "/_site/pass/roles")
     {:headers {"accept" "application/json"
                "authorization" (format "Bearer %s" access-token)}
      :throw true
      :debug CURL_DEBUG})))

(assert (= 200 (:status get-user-groups-response)))
(:body get-user-groups-response)

(def get-user-group-response
  (with-status-message
    "GET example role"
    (curl/get
     (url "/_site/pass/roles/owners")
     {:headers {"accept" "application/json"
                "authorization" (format "Bearer %s" access-token)}
      :throw true
      :debug CURL_DEBUG})))

(assert (= 200 (:status get-user-group-response)))

;; Local Variables:
;; mode: clojure
;; End:
