#_( ;; Allow this script to be executed directly
   "exec" "bb" "--classpath" "$(clojure -Spath -Sdeps '{:deps {io.aviso/pretty {:mvn/version "RELEASE"}}}')" "$0" "$@"
   )

;;"$(clojure -Spath -Sdeps '{:deps {io.aviso/pretty {:mvn/version "RELEASE"}}}')"

(ns bootstrap
  (:require
   [io.aviso.ansi :as ansi]
   [babashka.curl :as curl]
   [clojure.java.io :as io]
   [cheshire.core :as json]
   [clojure.pprint :refer [pprint]]
   [clojure.edn :as edn]))

(def CURL_DEBUG false)
(def HOST "localhost:8082")
(def CRUX_ADMIN ["crux/admin" "FunkyForest"])

(defn url [path]
  (format "%s%s" HOST path))

(defmacro with-status-message [msg & body]
  `(do
     (print (str ansi/yellow-font ~msg ansi/reset-font "..."))
     (let [result# ~@body]
       (println (str "[" ansi/bold-red-font "done" ansi/reset-font "]"))
       (println "Response was:")
       (pprint (select-keys result# [:status :headers]))
       result#)))

(def put-openapi-response
  (let [openapi (edn/read-string (slurp "openapi.edn"))
        openapi.json (json/generate-string openapi)]
    (with-status-message
      (format "PUT %s (%s)" (get-in openapi [:info :title]) (get-in openapi [:info :version]))
      (curl/put
       (url "/_crux/apis/pass/openapi.json")
       {:headers {"content-type" "application/vnd.oai.openapi+json;version=3.0.2"}
        :body openapi.json
        :throw true
        :basic-auth CRUX_ADMIN
        :debug CURL_DEBUG}))))

(assert (= 201 (:status put-openapi-response)))

(def get-openapi-json-response
  (with-status-message
    "Checking OpenAPI using GET on /_crux/apis/pass/openapi.json"
    (curl/get
     (url "/_crux/apis/pass/openapi.json")
     {:basic-auth CRUX_ADMIN
      :throw true
      :debug CURL_DEBUG})))

(assert (= 200 (:status get-openapi-json-response)))
(:body get-openapi-json-response)

;; Now we are ready to PUT a user-group that will the owners of this Crux Site
;; instance will belong to.

;; TODO: Do a loop

(doseq [{:keys [id name]}
        [{:id "owners" :name "Owners"}
         {:id "superusers" :name "Superusers"}
         {:id "admins" :name "Administrators"}]]
  (let [response
        (with-status-message
          (format "PUT user-group '%s'" id)
          (curl/put
           (url (format "/_crux/pass/user-groups/%s" id))
           {:headers {"content-type" "application/json"}
            :body (json/generate-string
                   {:type "UserGroup"
                    :name name})
            :throw false
            :basic-auth CRUX_ADMIN
            :debug CURL_DEBUG}))]
    (assert (#{200 201} (:status response)))))

(def get-user-groups-response
  (with-status-message
    "GET user-groups"
    (curl/get
     (url "/_crux/pass/user-groups")
     {:headers {"accept" "application/json"}
      :throw true
      :basic-auth CRUX_ADMIN
      :debug CURL_DEBUG})))

(assert (= 200 (:status get-user-groups-response)))
(:body get-user-groups-response)

(def get-user-group-response
  (with-status-message
    "GET example user-group"
    (curl/get
     (url "/_crux/pass/user-groups/owners")
     {:headers {"accept" "application/json"}
      :throw true
      :basic-auth CRUX_ADMIN
      :debug CURL_DEBUG})))

(assert (= 200 (:status get-user-group-response)))

(doseq [{:keys [id name email password groups]}
        [{:id "juxtjdt"
          :name "Jeremy Taylor"
          :email "jdt@juxt.pro"
          :password "BlueCheese"
          :groups ["/_crux/pass/user-groups/superusers"
                   "/_crux/pass/user-groups/owners"
                   "/_crux/pass/user-groups/admins"]}

         {:id "juxtmal"
          :name "Malcolm Sparks"
          :email "mal@juxt.pro"
          :password "HarryFord1782"
          :groups ["/_crux/pass/user-groups/superusers"
                   "/_crux/pass/user-groups/owners"]}

         {:id "juxttim"
          :name "Tim Greene"
          :email "tim@juxt.pro"
          :password "BristolRoversAreTheBest"
          :groups ["/_crux/pass/user-groups/admins"]}]]

  (let [response
        (with-status-message
          (format "PUT user '%s'" id)
          (curl/put
           (url (format "/_crux/pass/users/%s" id))
           {:headers {"content-type" "application/json"}
            :body (json/generate-string
                   {"type" "User"
                    "email" email
                    "name" name
                    "password" password
                    "userGroups" groups})
            :throw false
            :basic-auth CRUX_ADMIN
            :debug CURL_DEBUG}))]
    (assert (#{200 201} (:status response)))))

#_(def get-owners-user-group-response
  (with-status-message
    "GET user-group 'owners'"
    (curl/get
     (url "/_crux/pass/user-groups/owners")
     {:headers {"accept" "application/json"}
      :throw true
      :basic-auth CRUX_ADMIN
      :debug CURL_DEBUG})))

#_(assert (= 200 (:status get-owners-user-group-response)))
#_(:body get-owners-user-group-response)

#_(def put-owner-response
  (with-status-message
    "PUT user 'juxtmal'"
    (curl/put
     (url "/_crux/pass/users/juxtmal")
     {:headers {"content-type" "application/json"}
      :body (json/generate-string
             {"username" "juxtmal"
              "email" "mal@juxt.pro"
              "password" "FoolishTiger"
              "userGroup" "/_crux/pass/user-groups/owners"})
      :throw false
      :basic-auth CRUX_ADMIN
      :debug CURL_DEBUG})))

;;(assert (#{200 201} (:status put-owner-response)))

#_(:body put-owner-response)

#_(def get-owner-response
  (with-status-message
    "GET user 'juxtmal'"
    (curl/get
     (url "/_crux/pass/users/juxtmal")
     {:headers {"accept" "application/json"}
      :throw true
      :basic-auth CRUX_ADMIN
      :debug CURL_DEBUG})))

#_(assert (= 200 (:status get-owner-response)))

#_(println "User representation")
#_(pprint (json/parse-string (:body get-owner-response)))

;; Finish now with crux/admin, start using juxtmal




;; Local Variables:
;; mode: clojure
;; End:
