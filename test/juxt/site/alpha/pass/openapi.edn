{:openapi "3.0.2"
 :info
 {:version "1.0.0"
  :title "Pass API"
  :description
  "Managing people, permissions and policies with Policy Based Access Control
  built on Crux's Datalog."
  :contact
  {:name "Malcolm Sparks"
   :email "mal@juxt.pro"
   :url "https://juxt.pro"}}
 :servers [{:url "/_crux/pass"}]

 :paths
 {"/info"
  {:get
   {:description "Get the current API info"
    :operationId "getStatus"
    :responses
    {200
     {"content"
      {"application/json" {}
       "text/html;charset=utf-8" {}}}}}}

  "/user-groups"
  {:options
   {:responses
    {200 {:description "User groups contain users and a set of roles from which they can choose to assume."}}}

   :get
   {:description "Returns all user-groups"
    :operationId "findUserGroups"
    :parameters
    [
     {:name "limit"
      :in "query"
      :description "Maximum number of results to return"
      :required false
      :schema {:type "integer"}}]
    :responses
    {200 {:crux/query
          {:find [e]
           :where [[e :owner]]
           ;;:limit $limit
           }

          :content
          {"application/json"
           {:schema
            {:type "array"
             :items {"$ref" "#/components/schemas/IdentifiedUserGroup"}}}
           "text/html;charset=utf-8" {}
           "text/csv" {}}}

     }}}

  ;; Option 1: Infer from the path - if uri is a crux.db/id, just look it up and return
  ;; Option 2:


  "/user-groups/{id}"
  {:parameters
   [{:name "id"
     :in "path"
     :description "User-group id"
     :required true
     :schema {:type "string"}}]

   :get
   {:description "Returns a given user-group",
    :operationId "findUserGroupById",

    :responses
    {200
     {:description "Single identified user-group"

      :crux/query {:find [name owner desc]
                   :where [[e :crux.db/id ?uri]
                           [(uri ?idstr) ?uri]
                           [(str "/user-groups/" ?id) ?idstr]
                           [(get $path-params "id") ?id]]
                   :in [$path-params]
                   :limit $limit}

      :content
      {"application/json" {:schema {"$ref" "#/components/schemas/IdentifiedUserGroup"}}
       "text/html;charset=utf-8" {}}}}}

   :put
   {:description "Upserts a user-group"
    :operationId "putUserGroup"
    :requestBody
    {:required true
     :content
     {"application/json" {:schema {"$ref" "#/components/schemas/IdentifiedUserGroup"}}}}
    :responses
    {200 {:description "User-group successfully updated"
          :content
          {"text/plain;charset=utf-8" {}}}

     201 {:description "User-group successfully created"
          :content
          {"text/plain;charset=utf-8" {}}}}}}

  "/users/{id}"
  {:parameters
   [{:name "id"
     :in "path"
     :description "User id"
     :required true
     :schema {:type "string"}}]

   :get
   {:description "Returns a given user",
    :operationId "findUserById",

    :responses
    {200
     {:description "Single identified user"
      :content
      {"application/json" {:schema {"$ref" "#/components/schemas/IdentifiedUser"}}}}}}

   :put
   {:description "Upserts a user"
    :operationId "putUser"
    :requestBody
    {:required true
     :content
     {"application/json" {:schema {"$ref" "#/components/schemas/IdentifiedUser"}}}}
    :responses
    {200 {:description "User successfully updated"
          :content
          {"text/plain;charset=utf-8" {}}}

     201 {:description "User successfully created"
          :content
          {"text/plain;charset=utf-8" {}}}}}}}

 :components
 {:schemas
  {"Identified"
   {"$id" "/schemas/Identified"
    :type "object"
    :description
    "The unique identifier of the document in the database. This is maps
    directly to the crux.db/id attribute."
    :required ["id"]
    :juxt.jinx.alpha/keyword-mappings {"id" "crux.db/id"}
    :properties
    {"id"
     {:type "string"
      :format "uri-reference"
      :juxt.jinx.alpha/as "uri"}}}

   "Named"
   {"$id" "/schemas/Named"
    :type "object"
    :required ["name"]
    :juxt.jinx.alpha/keyword-mappings {"name" "name"}
    :properties
    {"name"
     {:type "string"
      :minLength 1}}}

   "MaybeOwned"
   {"$id" "/schemas/MaybeOwned"
    :type "object"
    :juxt.jinx.alpha/keyword-mappings {"owner" "owner"}
    :properties
    {"owner"
     {:type "string"
      :format "uri-reference"
      ;; This hints that the property owner is a reference to a Crux
      ;; entity
      :juxt.jinx.alpha/as "uri"
      }}}

   "Owned"
   {"$id" "/schemas/Owned"
    :allOf
    [{"$ref" "#/components/schemas/MaybeOwned"}
     {:required ["owner"]}]}

   "Organization"
   {"$id" "/schemas/Organization"
    :allOf
    [{"$ref" "#/components/schemas/Named"}
     {:type "object"
      :properties
      {"address"
       {:type "string"
        :minLength 1}}}]}

   "IdentifiedOrganization"
   {"$id" "/schemas/IdentifiedOrganization"
    :allOf
    [{"$ref" "#/components/schemas/Identified"}
     {"$ref" "#/components/schemas/Organization"}]}

   "Role"
   {"$id" "/schemas/Role"
    :description "Every interaction with a protected part of the system must be
    taken with a single role. Roles are owned by organisations, and this
    determines the organisation the interaction is taken on behalf of."
    :allOf
    [{"$ref" "#/components/schemas/Named"}
     {"$ref" "#/components/schemas/Owned"}]}

   "IdentifiedRole"
   {"$id" "/schemas/IdentifiedRole"
    :allOf
    [{"$ref" "#/components/schemas/Identified"}
     {"$ref" "#/components/schemas/Role"}]}

   ;;   Rule = target + effect (allow/deny) + condition.
   ;;   Target = subject + resource + action

   ;; subject = role

   ;; /users - body must be of type 'user'

   ;; Rule = (isInstance(PUT-rep, 'user') + dealership-manager + POST) + allow + (PUT-rep.owner = subject.owner)


   ;; POST

   "UserGroup"
   {"$id" "/schemas/UserGroup"
    :description "Users are organized into groups. User groups can have multiple
    roles, users in the user-group assume one of these roles for each
    interaction with the system."
    :allOf
    [{"$ref" "#/components/schemas/Named"}
     {"$ref" "#/components/schemas/Owned"}
     {:properties
      {"type" {:const "UserGroup"}
       "description"
       {:type "string"}
       "roles"
       {:type "array"
        :items
        {:type "string"
         :format "uri-reference"
         :juxt.jinx.alpha/as "uri"
         }}}}]}

   "IdentifiedUserGroup"
   {"$id" "/schemas/IdentifiedUserGroup"
    :allOf
    [{"$ref" "#/components/schemas/Identified"}
     {"$ref" "#/components/schemas/UserGroup"}]}

   "User"
   {"$id" "/schemas/User"
    :allOf
    [{:type "object"
      :required ["email" "userGroup"]
      :properties
      {"email"
       {:type "string"
        :format "email"}
       "password"
       {:type "string"
        ;;:crux/classification :crux/restricted
        :juxt.jinx.alpha/as "password"
        :description "The user's password, stored as a hash at rest, and only
        transmitted in the clear when being set."
        }
       "userGroup"
       {:type "string"
        :format "uri-reference"
        :juxt.jinx.alpha/as "uri"
        :crux/reference? true
        ;;:crux.json-schema/schema-of-target "/schemas/IdentifiedUserGroup"
        }}}]}

   "IdentifiedUser"
   {"$id" "/schemas/IdentifiedUser"
    :allOf
    [{"$ref" "#/components/schemas/Identified"}
     {"$ref" "#/components/schemas/User"}]}}

  "Asset"
  {"$id" "/schemas/Asset"
   :allOf
   [{"$ref" "#/components/schemas/Named"}
    {:type "object"
     :properties
     {"location"
      {:type "string"
       :minLength 1}}}
    {"$ref" "#/components/schemas/Owned"}]}

  "IdentifiedAsset"
  {"$id" "/schemas/IdentifiedAsset"
   :allOf
   [{"$ref" "#/components/schemas/Identified"}
    {"$ref" "#/components/schemas/Asset"}]}}}
