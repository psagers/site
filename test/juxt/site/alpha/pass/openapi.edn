{:openapi "3.0.2"
 :info
 {:version "1.0.0"
  :title "Pass API"
  :description
  "Managing Crux users, roles, orgs and policies."
  :contact
  {:name "Malcolm Sparks"
   :email "mal@juxt.pro"
   :url "https://juxt.pro"}}
 :servers [{:url "/_crux/pass"}]

 :paths
 {"/roles"
  {:get
   {:description "Returns all roles"
    :operationId "findRoles"
    :parameters
    [{:name "limit"
      :in "query"
      :description "Maximum number of results to return"
      :required false
      :default 100
      :schema {:type "integer"}}]
    :responses
    {200 {:crux/query
          {:find [e]
           :where [[e :type t]]
           :args [{t "Role"}]
           :limit {:in "query" :name "limit"}}

          :content
          {"application/json"
           {:schema
            {:type "array"
             :items {"$ref" "#/components/schemas/IdentifiedRole"}}}

           "text/html;charset=utf-8" {:title "Roles"
                                      :type "edn-table"}}}}}}

  "/roles/{id}"
  {
   :get
   {:description "Returns a given role"
    ;; NOTE: Path-object level parameters not yet supported!!
    :parameters
    [{:name "id"
      :in "path"
      :description "Role id"
      :required true
      :schema {:type "string"}}]
    :operationId "findRoleById"

    :responses
    {200
     {:description "Single identified role"

      #_:juxt.site.alpha/state
      #_{:users
         (crux/q
          {:find [user email]
           :where [[(get-attr user :email) email]
                   [user :type user-type]
                   [user :roles this]]
           :in [this]
           :args [{user-type "User"}]})}

      :content
      {"application/json" {:schema {"$ref" "#/components/schemas/Role"}}

       "text/html;charset=utf-8" {:title "Role"}}}}}

   :put
   {:description "Upserts a role"
    :operationId "putRole"
    :parameters
    [{:name "id"
      :in "path"
      :description "Role id"
      :required true
      :schema {:type "string"}}]
    :requestBody
    {:required true
     :content
     {"application/json" {:schema {"$ref" "#/components/schemas/Role"}}}}
    :responses
    {200 {:description "Role successfully updated"
          :content
          {"text/plain;charset=utf-8" {}}}

     201 {:description "Role successfully created"
          :content
          {"text/plain;charset=utf-8" {}}}}}}

  "/users"
  {:get
   {:description "Returns a list of all the users you're allowed to view"
    :operationId "findUsers"

    :responses
    {200
     {:crux/query
      {:find [e]
       :where [[e :type t]]
       :args [{t "User"}]}

      :content
      {"application/json"
       {:schema {"type" "array"
                 "items" {"$ref" "#/components/schemas/IdentifiedUser"}}}

       "text/html;charset=utf-8"
       {:title "Users"
        :type "edn-table"
        :schema {"type" "array"
                 "items" {"$ref" "#/components/schemas/IdentifiedUser"}}}}}}}}

  "/users/{id}"
  {:parameters
   [{:name "id"
     :in "path"
     :description "User id"
     :required true
     :schema {:type "string"}}]

   :get
   {:description "Returns a given user",
    :operationId "findUserById",

    :responses
    {200
     {:description "Single identified user"
      :content
      {"application/json"
       {:schema {"$ref" "#/components/schemas/User"}
        :example
        {"type" "User"
         "name" "John Doe"
         "email" "john@example.com"
         "password" "DoReMi123"
         "roles" ["/_crux/pass/roles/admin"
                  "/_crux/pass/roles/manager"]}}

       "text/html;charset=utf-8"
       {:title "User"
        :schema {"$ref" "#/components/schemas/User"}}}}}}

   :put
   {:description "Upserts a user"
    :operationId "putUser"
    :requestBody
    {:required true
     :content
     {"application/json"
      {:schema {"$ref" "#/components/schemas/User"}
       :example
       {"type" "User"
        "name" "John Doe"
        "email" "john@example.com"
        "password" "DoReMi123"
        "roles" ["/_crux/pass/roles/admin"
                 "/_crux/pass/roles/manager"]}}}}

    :responses
    {200 {:description "User successfully updated"
          :content
          {"text/plain;charset=utf-8" {}}}

     201 {:description "User successfully created"
          :content
          {"text/plain;charset=utf-8" {}}}}}}}

 :components
 {:schemas
  {"Identified"
   {"$id" "/schemas/Identified"
    :type "object"
    :description
    "The unique identifier of the document in the database. This is maps
    directly to the crux.db/id attribute."
    :required ["id"]
    :juxt.jinx.alpha/keyword-mappings {"id" "crux.db/id"}
    :properties
    {"id"
     {:type "string"
      :format "uri-reference"
      :juxt.jinx.alpha/as "uri"}}}

   "Named"
   {"$id" "/schemas/Named"
    :type "object"
    :required ["name"]
    :juxt.jinx.alpha/keyword-mappings {"name" "name"}
    :properties
    {"name"
     {:type "string"
      :minLength 1}}}

   "Typed"
   {"$id" "/schemas/Typed"
    :type "object"
    :required ["type"]
    :juxt.jinx.alpha/keyword-mappings {"type" "type"}
    :properties
    {"type"
     {:type "string"
      :minLength 1}}}

   "Role"
   {"$id" "/schemas/Role"
    :allOf
    [{"$ref" "#/components/schemas/Named"}
     {"$ref" "#/components/schemas/Typed"}
     {:properties
      {"type" {:const "Role"}
       "description"
       {:type "string"}
       "roles"
       {:type "array"
        :items
        {:type "string"
         :format "uri-reference"
         :juxt.jinx.alpha/as "uri"
         }}}}]}

   "IdentifiedRole"
   {"$id" "/schemas/IdentifiedRole"
    :allOf
    [{"$ref" "#/components/schemas/Identified"}
     {"$ref" "#/components/schemas/Role"}]}

   "User"
   {"$id" "/schemas/User"
    :allOf
    [{"$ref" "#/components/schemas/Named"}
     {"$ref" "#/components/schemas/Typed"}
     {:type "object"
      :required ["email" "password" "roles"]
      :juxt.jinx.alpha/keyword-mappings {"email" "email"
                                         "password" "password"
                                         "roles" "roles"}
      :properties
      {"type" {:const "User"}
       "email"
       {:type "string"
        :format "email"}
       "password"
       {:type "string"
        :juxt.jinx.alpha/as "password"
        :description "The user's password, stored as a hash at rest, and only
        transmitted in the clear when being set."}
       "roles"
       {:type "array"
        :items
        {:type "string"
         :format "uri-reference"
         :juxt.jinx.alpha/as "uri"
         :crux/reference? true}}
       "org" {:type "string"
              :format "uri-reference"
              :juxt.jinx.alpha/as "uri"}}}]}

   "IdentifiedUser"
   {"$id" "/schemas/IdentifiedUser"
    :allOf
    [{"$ref" "#/components/schemas/Identified"}
     {"$ref" "#/components/schemas/User"}]}

   }}}
