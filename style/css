#_( ;; Allow this script to be executed directly
   "exec" "bb" "--classpath" "$(clojure -Spath -Sdeps '{:deps {io.aviso/pretty {:mvn/version "RELEASE"}}}')" "$0" "$@"
   )

(ns upload-to-site
  (:require
   [babashka.curl :as curl]
   [io.aviso.ansi :as ansi]
   [clojure.java.shell :as shell]
   [clojure.tools.cli :refer [parse-opts summarize]]
   [clojure.java.io :as io]))

(def ^:dynamic *debug* nil)

(defn debugf
  "Write a debug message to the console, but only if *debug* is true."
  [& args]
  (when *debug*
    (println "DEBUG:" (apply format args))))

(defmacro with-status-message [msg & body]
  `(do
     (print (str ansi/yellow-font ~msg ansi/reset-font "..."))
     (let [result# ~@body]
       (println (str "[" ansi/bold-red-font "done" ansi/reset-font "]"))
       result#)))

(defn upload [_]
  (doseq [fl (take 1 (.listFiles (io/file "node_modules/tailwindcss/dist")))]
    (with-status-message
      (format "PUT resource")
      (curl/put
       (str "http://localhost:8082/css/" (.getName fl))
       {:headers {"content-type" "text/css"}
        :throw true
        :body fl
        :basic-auth ["webmaster" "FunkyForest"]
        :debug false}))))


(def cli-options
  [["-h" "--help" "Show this summary"]
   ["-v" "--verbose" "Verbose mode"]
   ["-d" "--debug" "Debug mode"]])

(defn build [_]
  ;; See https://github.com/postcss/postcss-cli
  (with-status-message
    "Building CSS"
    (do
      (.mkdir (io/file "target"))
      (let [{:keys [exit out err]}
            (shell/sh "node_modules/.bin/postcss" "styles.css" "-o" "target/styles.css")]
        (println out)
        (when-not (zero? exit)
          (println err))))))

(defn brotli-compress [_]
  (with-status-message
    "Compressing with brotli"
    (let [{:keys [exit out err]}
          ;; TODO: Don't use -f unless file is newer
          (shell/sh "brotli" "-f" "target/styles.css")]
      (println out)
      (when-not (zero? exit)
        (println err)))))

(defn gzip-compress [_]
  (with-status-message
    "Compressing with gzip"
    ;; See https://github.com/postcss/postcss-cli
    (let [{:keys [exit out err]}
          (shell/sh "gzip" "-fk" "target/styles.css")]
      (println out)
      (when-not (zero? exit)
        (println err)))))

(defn all [arg]
  (build arg)
  (gzip-compress arg)
  (brotli-compress arg))

(def commands
  {"upload"
   {:description "Upload to Site"
    :cli-options []
    :delegate upload}
   "build"
   {:description "Build"
    :cli-options []
    :delegate build}
   "compress"
   {:description "Compress to gzip"
    :cli-options []
    :delegate gzip-compress}
   "brotli"
   {:description "Compress to brotli"
    :cli-options []
    :delegate brotli-compress}
   "all"
   {:description "Build all"
    :cli-options []
    :delegate all}
   })

(let [{:keys [options arguments summary errors]}
      (parse-opts *command-line-args*  cli-options :in-order true)
      command (first arguments)
      {:keys [cli-options delegate]} (get commands (first arguments))

      print-summary
      (fn []
        (do
          (println "Site. Tailwind CSS.")
          (println summary)
          (doseq [[command {:keys [description cli-options delegate]}] commands]
            (apply
             println
             (remove nil? [command "\t" description
                           (when-not delegate "(coming soon!)")]))
            (println "\t" (:summary (parse-opts [] cli-options))))))]

  (cond
    (contains? options :help)
    (print-summary)

    errors
    (doseq [err errors]
      (println err))

    (find commands command)
    (binding [*debug* (:debug options)]
      (if delegate
        (delegate
         (-> (parse-opts (next arguments) cli-options)
             (update :options merge options)))
        (println "No implementation:" command)))

    (first arguments)
    (println "Unknown command:" (first arguments))

    :else
    (print-summary)))


;; Local Variables:
;; mode: clojure
;; End:
